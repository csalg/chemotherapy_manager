var _user$project$Page_Patients$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return {dt_now: a, error: b, patients: c, query: d, show_filter_options: e, filterByActive: f, filterByTemporaryHalt: g, filterByHalt: h, filterByFinished: i, orderBy: j, pid: k, patient: l, form: m};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Page_Patients$TherapyStatus = {ctor: 'TherapyStatus'};
var _user$project$Page_Patients$ExpiryAgo = {ctor: 'ExpiryAgo'};
var _user$project$Page_Patients$HeartAgo = {ctor: 'HeartAgo'};
var _user$project$Page_Patients$HeartDt = {ctor: 'HeartDt'};
var _user$project$Page_Patients$DoseDT = {ctor: 'DoseDT'};
var _user$project$Page_Patients$DoseAgo = {ctor: 'DoseAgo'};
var _user$project$Page_Patients$PatientCard = {ctor: 'PatientCard'};
var _user$project$Page_Patients$PatientAge = {ctor: 'PatientAge'};
var _user$project$Page_Patients$init = _user$project$Page_Patients$Model(
	_elm_lang$core$Date$fromTime(0))(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)('')(false)(true)(true)(false)(false)(
	{ctor: '_Tuple2', _0: _user$project$Page_Patients$PatientAge, _1: _debois$elm_mdl$Material_Table$Descending})(0)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing);
var _user$project$Page_Patients$PatientName = {ctor: 'PatientName'};
var _user$project$Page_Patients$Id = {ctor: 'Id'};
var _user$project$Page_Patients$ExpressMsg = function (a) {
	return {ctor: 'ExpressMsg', _0: a};
};
var _user$project$Page_Patients$CloseModal = {ctor: 'CloseModal'};
var _user$project$Page_Patients$Reorder = function (a) {
	return {ctor: 'Reorder', _0: a};
};
var _user$project$Page_Patients$FilterBy = function (a) {
	return {ctor: 'FilterBy', _0: a};
};
var _user$project$Page_Patients$ChangePage = function (a) {
	return {ctor: 'ChangePage', _0: a};
};
var _user$project$Page_Patients$ToggleShowFilters = {ctor: 'ToggleShowFilters'};
var _user$project$Page_Patients$SetQuery = function (a) {
	return {ctor: 'SetQuery', _0: a};
};
var _user$project$Page_Patients$viewSearchArea = function (model) {
	var filterOptions = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('row'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '5px'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('按照治疗状态筛选: '),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_rundis$elm_bootstrap$Bootstrap_ButtonGroup$checkboxButtonGroup,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A3(
									_rundis$elm_bootstrap$Bootstrap_ButtonGroup$checkboxButton,
									model.filterByActive,
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineSecondary,
										_1: {
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
												_user$project$Page_Patients$FilterBy(_user$project$Data_Patient$Active)),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('治疗中'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A3(
										_rundis$elm_bootstrap$Bootstrap_ButtonGroup$checkboxButton,
										model.filterByTemporaryHalt,
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineSecondary,
											_1: {
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
													_user$project$Page_Patients$FilterBy(_user$project$Data_Patient$TemporaryHalt)),
												_1: {ctor: '[]'}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('暂停治疗'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A3(
											_rundis$elm_bootstrap$Bootstrap_ButtonGroup$checkboxButton,
											model.filterByHalt,
											{
												ctor: '::',
												_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineSecondary,
												_1: {
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
														_user$project$Page_Patients$FilterBy(_user$project$Data_Patient$Halt)),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('终止'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A3(
												_rundis$elm_bootstrap$Bootstrap_ButtonGroup$checkboxButton,
												model.filterByFinished,
												{
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Button$outlineSecondary,
													_1: {
														ctor: '::',
														_0: _rundis$elm_bootstrap$Bootstrap_Button$onClick(
															_user$project$Page_Patients$FilterBy(_user$project$Data_Patient$Finished)),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('完成所有治疗'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('mdl-shadow--2dp'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'white'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '10px'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('container search_bar'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('input-group mb-3'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('input-group-prepend'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('input-group-text'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$id('basic-addon1'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$i,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('fas fa-filter'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$input,
											{
												ctor: '::',
												_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-describedby', 'basic-addon1'),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', '输入筛选查询'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('form-control'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$placeholder('输入筛选查询'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$type_('text'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$style(_user$project$Styles$searchBarCustom),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onInput(_user$project$Page_Patients$SetQuery),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class(''),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('btn btn-default '),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$id('search_button'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$type_('submit'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onClick(_user$project$Page_Patients$ToggleShowFilters),
															_1: {ctor: '[]'}
														}
													}
												}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$i,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('fas fa-sliders-h'),
														_1: {ctor: '[]'}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														model.show_filter_options ? ' 隐藏筛选项' : ' 显示筛选项'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('btn btn-default btn-inline'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$id('newPatientButton'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$type_('button'),
															_1: {
																ctor: '::',
																_0: _user$project$Route$href(_user$project$Route$NewPatient),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$i,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('fas fa-user-plus'),
															_1: {ctor: '[]'}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text(' 新建患者'),
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: model.show_filter_options ? filterOptions : _elm_lang$html$Html$text(''),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Page_Patients$GetPatientsWithExpress = F2(
	function (a, b) {
		return {ctor: 'GetPatientsWithExpress', _0: a, _1: b};
	});
var _user$project$Page_Patients$initTaskWithExpress = function (pid) {
	return A2(
		_elm_lang$core$Task$perform,
		_user$project$Page_Patients$GetPatientsWithExpress(pid),
		_elm_lang$core$Time$now);
};
var _user$project$Page_Patients$viewTable = function (model) {
	var sortFields = function (lst) {
		var _p0 = model.orderBy;
		var field = _p0._0;
		var sort = _p0._1;
		var sortedList = function () {
			var _p1 = field;
			switch (_p1.ctor) {
				case 'Id':
					return A2(
						_elm_lang$core$List$sortBy,
						function (_) {
							return _.id;
						},
						lst);
				case 'PatientName':
					return A2(
						_elm_lang$core$List$sortBy,
						function (_) {
							return _.patient_name;
						},
						lst);
				case 'PatientAge':
					return A2(
						_elm_lang$core$List$sortBy,
						function (_p2) {
							return A2(
								_elm_lang$core$Result$withDefault,
								0,
								_elm_lang$core$String$toInt(
									function (_) {
										return _.patient_age;
									}(_p2)));
						},
						lst);
				case 'PatientCard':
					return A2(
						_elm_lang$core$List$sortBy,
						function (_) {
							return _.patient_card;
						},
						lst);
				case 'DoseAgo':
					return A2(
						_elm_lang$core$List$sortBy,
						function (_) {
							return _.dose_ago;
						},
						lst);
				case 'DoseDT':
					return A2(
						_elm_lang$core$List$sortBy,
						function (_p3) {
							return _elm_lang$core$Date$toTime(
								function (_) {
									return _.dose_dt;
								}(_p3));
						},
						lst);
				case 'HeartDt':
					return A2(
						_elm_lang$core$List$sortBy,
						function (_p4) {
							return _elm_lang$core$Date$toTime(
								function (_) {
									return _.heart_dt;
								}(_p4));
						},
						lst);
				case 'HeartAgo':
					return A2(
						_elm_lang$core$List$sortBy,
						function (_) {
							return _.heart_ago;
						},
						lst);
				case 'ExpiryAgo':
					return A2(
						_elm_lang$core$List$sortBy,
						function (_) {
							return _.expiry_ago;
						},
						lst);
				default:
					return A2(
						_elm_lang$core$List$sortBy,
						function (_p5) {
							return _user$project$Data_Patient$statusToString(
								function (_) {
									return _.therapy_status;
								}(_p5));
						},
						lst);
			}
		}();
		var _p6 = sort;
		if (_p6.ctor === 'Ascending') {
			return sortedList;
		} else {
			return _elm_lang$core$List$reverse(sortedList);
		}
	};
	var patients = function () {
		var _p7 = model.patients;
		if (_p7.ctor === 'Nothing') {
			return {ctor: '[]'};
		} else {
			return A2(
				_elm_lang$core$List$filter,
				function (patient) {
					return ((model.filterByActive ? _elm_lang$core$Native_Utils.eq(patient.therapy_status, _user$project$Data_Patient$Active) : false) || ((model.filterByTemporaryHalt ? _elm_lang$core$Native_Utils.eq(patient.therapy_status, _user$project$Data_Patient$TemporaryHalt) : false) || ((model.filterByHalt ? _elm_lang$core$Native_Utils.eq(patient.therapy_status, _user$project$Data_Patient$Halt) : false) || (model.filterByFinished ? _elm_lang$core$Native_Utils.eq(patient.therapy_status, _user$project$Data_Patient$Finished) : false)))) && function () {
						var _p8 = _elm_lang$core$String$uncons(model.query);
						if (_p8.ctor === 'Nothing') {
							return true;
						} else {
							var _p9 = _p8._0._0;
							return (_elm_lang$core$Native_Utils.eq(
								_p9,
								_elm_lang$core$Native_Utils.chr('!')) || _elm_lang$core$Native_Utils.eq(
								_p9,
								_elm_lang$core$Native_Utils.chr('！'))) ? A2(
								_elm_lang$core$String$contains,
								_p8._0._1,
								_elm_lang$core$Basics$toString(patient.id)) : (A2(
								_elm_lang$core$String$contains,
								model.query,
								function (_) {
									return _.patient_name;
								}(patient)) || (A2(
								_elm_lang$core$String$contains,
								model.query,
								_elm_lang$core$Basics$toString(patient.id)) || A2(
								_elm_lang$core$String$contains,
								model.query,
								_elm_lang$core$Basics$toString(patient.patient_card))));
						}
					}();
				},
				sortFields(_p7._0));
		}
	}();
	var sortOrder = function (field_) {
		var _p10 = model.orderBy;
		var field = _p10._0;
		var sort = _p10._1;
		if (_elm_lang$core$Native_Utils.eq(field, field_)) {
			var _p11 = sort;
			if (_p11.ctor === 'Ascending') {
				return {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Table$ascending,
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Table$descending,
					_1: {ctor: '[]'}
				};
			}
		} else {
			return {ctor: '[]'};
		}
	};
	var fields = {
		ctor: '::',
		_0: {
			ctor: '_Tuple4',
			_0: function (_p12) {
				return _elm_lang$core$Basics$toString(
					function (_) {
						return _.id;
					}(_p12));
			},
			_1: 'id',
			_2: A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _debois$elm_mdl$Material_Table$numeric,
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$onClick(
							_user$project$Page_Patients$Reorder(_user$project$Page_Patients$Id)),
						_1: {ctor: '[]'}
					}
				},
				sortOrder(_user$project$Page_Patients$Id)),
			_3: {ctor: '[]'}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple4',
				_0: function (_) {
					return _.patient_name;
				},
				_1: '姓名',
				_2: A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _debois$elm_mdl$Material_Options$onClick(
							_user$project$Page_Patients$Reorder(_user$project$Page_Patients$PatientName)),
						_1: {ctor: '[]'}
					},
					sortOrder(_user$project$Page_Patients$PatientName)),
				_3: {ctor: '[]'}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple4',
					_0: function (_) {
						return _.patient_age;
					},
					_1: '年龄',
					_2: A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Table$numeric,
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$onClick(
									_user$project$Page_Patients$Reorder(_user$project$Page_Patients$PatientAge)),
								_1: {ctor: '[]'}
							}
						},
						sortOrder(_user$project$Page_Patients$PatientAge)),
					_3: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Table$numeric,
						_1: {ctor: '[]'}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple4',
						_0: function (_) {
							return _.patient_card;
						},
						_1: '磁卡号',
						_2: A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Table$numeric,
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onClick(
										_user$project$Page_Patients$Reorder(_user$project$Page_Patients$PatientCard)),
									_1: {ctor: '[]'}
								}
							},
							sortOrder(_user$project$Page_Patients$PatientCard)),
						_3: {ctor: '[]'}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple4',
							_0: function (_p13) {
								return _elm_lang$core$Basics$toString(
									function (_) {
										return _.dose_ago;
									}(_p13));
							},
							_1: '几天前用药',
							_2: A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Table$numeric,
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(
											_user$project$Page_Patients$Reorder(_user$project$Page_Patients$DoseAgo)),
										_1: {ctor: '[]'}
									}
								},
								sortOrder(_user$project$Page_Patients$DoseAgo)),
							_3: {ctor: '[]'}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple4',
								_0: function (_p14) {
									return _user$project$Data_Date$dateToString(
										function (_) {
											return _.dose_dt;
										}(_p14));
								},
								_1: '用药日期',
								_2: A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Options$onClick(
											_user$project$Page_Patients$Reorder(_user$project$Page_Patients$DoseDT)),
										_1: {ctor: '[]'}
									},
									sortOrder(_user$project$Page_Patients$DoseDT)),
								_3: {ctor: '[]'}
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple4',
									_0: function (_p15) {
										return _user$project$Data_Date$dateToString(
											function (_) {
												return _.heart_dt;
											}(_p15));
									},
									_1: '心超日期',
									_2: A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onClick(
												_user$project$Page_Patients$Reorder(_user$project$Page_Patients$HeartDt)),
											_1: {ctor: '[]'}
										},
										sortOrder(_user$project$Page_Patients$HeartDt)),
									_3: {ctor: '[]'}
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple4',
										_0: function (_p16) {
											return _elm_lang$core$Basics$toString(
												function (_) {
													return _.heart_ago;
												}(_p16));
										},
										_1: '几天前心超',
										_2: A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_Table$numeric,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$onClick(
														_user$project$Page_Patients$Reorder(_user$project$Page_Patients$HeartAgo)),
													_1: {ctor: '[]'}
												}
											},
											sortOrder(_user$project$Page_Patients$HeartAgo)),
										_3: {ctor: '[]'}
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple4',
											_0: function (_p17) {
												return _elm_lang$core$Basics$toString(
													function (_) {
														return _.expiry_ago;
													}(_p17));
											},
											_1: '几天本药到期',
											_2: A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: _debois$elm_mdl$Material_Table$numeric,
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$onClick(
															_user$project$Page_Patients$Reorder(_user$project$Page_Patients$ExpiryAgo)),
														_1: {ctor: '[]'}
													}
												},
												sortOrder(_user$project$Page_Patients$ExpiryAgo)),
											_3: {ctor: '[]'}
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple4',
												_0: function (_p18) {
													return _user$project$Data_Patient$statusToString(
														function (_) {
															return _.therapy_status;
														}(_p18));
												},
												_1: '治疗状态',
												_2: A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$onClick(
															_user$project$Page_Patients$Reorder(_user$project$Page_Patients$TherapyStatus)),
														_1: {ctor: '[]'}
													},
													sortOrder(_user$project$Page_Patients$TherapyStatus)),
												_3: {ctor: '[]'}
											},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	};
	return A2(
		_debois$elm_mdl$Material_Table$table,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '100%'),
			_1: {
				ctor: '::',
				_0: _debois$elm_mdl$Material_Elevation$e2,
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Table$thead,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Table$tr,
						{ctor: '[]'},
						A2(
							_elm_lang$core$List$map,
							function (_p19) {
								var _p20 = _p19;
								return A2(
									_debois$elm_mdl$Material_Table$th,
									_p20._2,
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(_p20._1),
										_1: {ctor: '[]'}
									});
							},
							fields)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Table$tbody,
					{ctor: '[]'},
					A2(
						_elm_lang$core$List$map,
						function (patient) {
							return A2(
								_debois$elm_mdl$Material_Table$tr,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$onClick(
										A2(
											_user$project$Page_Patients$GetPatientsWithExpress,
											patient.id,
											_elm_lang$core$Date$toTime(model.dt_now))),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$List$map,
									function (_p21) {
										var _p22 = _p21;
										return A2(
											_debois$elm_mdl$Material_Table$td,
											_p22._3,
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													_p22._0(patient)),
												_1: {ctor: '[]'}
											});
									},
									fields));
						},
						patients)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Page_Patients$view = function (model) {
	var modal = function () {
		var _p23 = model.form;
		if (_p23.ctor === 'Nothing') {
			return _elm_lang$html$Html$text('');
		} else {
			return A3(_user$project$Views_ExpressForm$viewAsModal, _user$project$Page_Patients$CloseModal, _user$project$Page_Patients$ExpressMsg, _p23._0);
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding', _1: '50px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '20px'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Page_Patients$viewSearchArea(model),
			_1: {
				ctor: '::',
				_0: _user$project$Page_Patients$viewTable(model),
				_1: {
					ctor: '::',
					_0: modal,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Page_Patients$GetPatients = function (a) {
	return {ctor: 'GetPatients', _0: a};
};
var _user$project$Page_Patients$initTask = A2(_elm_lang$core$Task$perform, _user$project$Page_Patients$GetPatients, _elm_lang$core$Time$now);
var _user$project$Page_Patients$FetchedPatient = function (a) {
	return {ctor: 'FetchedPatient', _0: a};
};
var _user$project$Page_Patients$Fetched = function (a) {
	return {ctor: 'Fetched', _0: a};
};
var _user$project$Page_Patients$update = F2(
	function (msg, model) {
		var _p24 = msg;
		switch (_p24.ctor) {
			case 'GetPatients':
				var dt_now = _elm_lang$core$Date$fromTime(_p24._0);
				return A2(
					_user$project$Util_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						model,
						{dt_now: dt_now}),
					A2(
						_elm_lang$http$Http$send,
						_user$project$Page_Patients$Fetched,
						_user$project$Request_Patients$get(dt_now)));
			case 'GetPatientsWithExpress':
				var _p25 = _p24._0;
				var dt_now = _elm_lang$core$Date$fromTime(_p24._1);
				return A2(
					_user$project$Util_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						model,
						{dt_now: dt_now, pid: _p25}),
					_elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Page_Patients$Fetched,
								_user$project$Request_Patients$get(dt_now)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$http$Http$send,
									_user$project$Page_Patients$FetchedPatient,
									A2(_user$project$Request_Patient$get, _p25, dt_now)),
								_1: {ctor: '[]'}
							}
						}));
			case 'Fetched':
				if (_p24._0.ctor === 'Err') {
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$toString(_p24._0._0))
							}),
						_elm_lang$core$Platform_Cmd$none);
				} else {
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								patients: _elm_lang$core$Maybe$Just(_p24._0._0)
							}),
						_elm_lang$core$Platform_Cmd$none);
				}
			case 'FetchedPatient':
				if (_p24._0.ctor === 'Err') {
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								error: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$toString(_p24._0._0))
							}),
						_elm_lang$core$Platform_Cmd$none);
				} else {
					var _p26 = _p24._0._0;
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								form: _elm_lang$core$Maybe$Just(
									A4(
										_user$project$Views_ExpressForm$initWithValues,
										model.pid,
										_p26,
										model.dt_now,
										_user$project$Route$PatientsWithExpress(model.pid))),
								patient: _elm_lang$core$Maybe$Just(_p26)
							}),
						_elm_lang$core$Platform_Cmd$none);
				}
			case 'SetQuery':
				var _p28 = _p24._0;
				var deb = _elm_lang$core$Debug$log(
					A2(_elm_lang$core$String$left, 1, _p28));
				if (((_elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$String$left, 1, _p28),
					'!') && _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$String$right, 1, _p28),
					'!')) || (_elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$String$left, 1, _p28),
					'！') && _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$String$right, 1, _p28),
					'！'))) && (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(_p28),
					2) > 0)) {
					var _p27 = _elm_lang$core$String$toInt(
						A3(_elm_lang$core$String$slice, 1, -1, _p28));
					if (_p27.ctor === 'Err') {
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									query: _p28,
									error: _elm_lang$core$Maybe$Just(
										A3(_elm_lang$core$String$slice, -1, -1, _p28))
								}),
							_elm_lang$core$Platform_Cmd$none);
					} else {
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									query: A3(_elm_lang$core$String$slice, 0, -1, _p28)
								}),
							A2(
								_elm_lang$core$Task$perform,
								_user$project$Page_Patients$GetPatientsWithExpress(_p27._0),
								_elm_lang$core$Time$now));
					}
				} else {
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{query: _p28}),
						_elm_lang$core$Platform_Cmd$none);
				}
			case 'ToggleShowFilters':
				return A2(
					_user$project$Util_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						model,
						{show_filter_options: !model.show_filter_options}),
					_elm_lang$core$Platform_Cmd$none);
			case 'FilterBy':
				var _p29 = _p24._0;
				switch (_p29.ctor) {
					case 'Active':
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{filterByActive: !model.filterByActive}),
							_elm_lang$core$Platform_Cmd$none);
					case 'TemporaryHalt':
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{filterByTemporaryHalt: !model.filterByTemporaryHalt}),
							_elm_lang$core$Platform_Cmd$none);
					case 'Halt':
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{filterByHalt: !model.filterByHalt}),
							_elm_lang$core$Platform_Cmd$none);
					default:
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{filterByFinished: !model.filterByFinished}),
							_elm_lang$core$Platform_Cmd$none);
				}
			case 'ChangePage':
				return A2(
					_user$project$Util_ops['=>'],
					model,
					_user$project$Route$newUrl(_p24._0));
			case 'Reorder':
				var _p31 = _p24._0;
				if (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Tuple$first(model.orderBy),
					_p31)) {
					var _p30 = model.orderBy;
					if (_p30._1.ctor === 'Ascending') {
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									orderBy: {ctor: '_Tuple2', _0: _p31, _1: _debois$elm_mdl$Material_Table$Descending}
								}),
							_elm_lang$core$Platform_Cmd$none);
					} else {
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									orderBy: {ctor: '_Tuple2', _0: _p31, _1: _debois$elm_mdl$Material_Table$Ascending}
								}),
							_elm_lang$core$Platform_Cmd$none);
					}
				} else {
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								orderBy: {ctor: '_Tuple2', _0: _p31, _1: _debois$elm_mdl$Material_Table$Descending}
							}),
						_elm_lang$core$Platform_Cmd$none);
				}
			case 'CloseModal':
				return A2(
					_user$project$Util_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						model,
						{form: _elm_lang$core$Maybe$Nothing}),
					_elm_lang$core$Platform_Cmd$none);
			case 'ExpressMsg':
				var _p32 = model.form;
				if (_p32.ctor === 'Nothing') {
					return A2(_user$project$Util_ops['=>'], model, _elm_lang$core$Platform_Cmd$none);
				} else {
					var _p33 = A2(_user$project$Views_ExpressForm$update, _p24._0, _p32._0);
					var new_model = _p33._0;
					var new_msg = _p33._1;
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								form: _elm_lang$core$Maybe$Just(new_model)
							}),
						A2(_elm_lang$core$Platform_Cmd$map, _user$project$Page_Patients$ExpressMsg, new_msg));
				}
			default:
				return A2(_user$project$Util_ops['=>'], model, _elm_lang$core$Platform_Cmd$none);
		}
	});
var _user$project$Page_Patients$UpdateNow = function (a) {
	return {ctor: 'UpdateNow', _0: a};
};
var _user$project$Page_Patients$Blank = {ctor: 'Blank'};
