var _rtfeldman$elm_validate$Validate$validEmail = _elm_lang$core$Regex$caseInsensitive(
	_elm_lang$core$Regex$regex('^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'));
var _rtfeldman$elm_validate$Validate$lacksNonWhitespaceChars = _elm_lang$core$Regex$regex('^\\s*$');
var _rtfeldman$elm_validate$Validate$isInt = function (str) {
	var _p0 = _elm_lang$core$String$toInt(str);
	if (_p0.ctor === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var _rtfeldman$elm_validate$Validate$isValidEmail = function (email) {
	return A2(_elm_lang$core$Regex$contains, _rtfeldman$elm_validate$Validate$validEmail, email);
};
var _rtfeldman$elm_validate$Validate$isBlank = function (str) {
	return A2(_elm_lang$core$Regex$contains, _rtfeldman$elm_validate$Validate$lacksNonWhitespaceChars, str);
};
var _rtfeldman$elm_validate$Validate$any = F2(
	function (validators, subject) {
		any:
		while (true) {
			var _p1 = validators;
			if (_p1.ctor === '[]') {
				return true;
			} else {
				var _p2 = _p1._0._0(subject);
				if (_p2.ctor === '[]') {
					var _v3 = _p1._1,
						_v4 = subject;
					validators = _v3;
					subject = _v4;
					continue any;
				} else {
					return false;
				}
			}
		}
	});
var _rtfeldman$elm_validate$Validate$firstErrorHelp = F2(
	function (validators, subject) {
		firstErrorHelp:
		while (true) {
			var _p3 = validators;
			if (_p3.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p4 = _p3._0._0(subject);
				if (_p4.ctor === '[]') {
					var _v7 = _p3._1,
						_v8 = subject;
					validators = _v7;
					subject = _v8;
					continue firstErrorHelp;
				} else {
					return _p4;
				}
			}
		}
	});
var _rtfeldman$elm_validate$Validate$validate = F2(
	function (_p5, subject) {
		var _p6 = _p5;
		return _p6._0(subject);
	});
var _rtfeldman$elm_validate$Validate$Validator = function (a) {
	return {ctor: 'Validator', _0: a};
};
var _rtfeldman$elm_validate$Validate$ifTrue = F2(
	function (test, error) {
		var getErrors = function (subject) {
			return test(subject) ? {
				ctor: '::',
				_0: error,
				_1: {ctor: '[]'}
			} : {ctor: '[]'};
		};
		return _rtfeldman$elm_validate$Validate$Validator(getErrors);
	});
var _rtfeldman$elm_validate$Validate$ifBlank = F2(
	function (subjectToString, error) {
		return A2(
			_rtfeldman$elm_validate$Validate$ifTrue,
			function (subject) {
				return _rtfeldman$elm_validate$Validate$isBlank(
					subjectToString(subject));
			},
			error);
	});
var _rtfeldman$elm_validate$Validate$ifEmptyList = F2(
	function (subjectToList, error) {
		return A2(
			_rtfeldman$elm_validate$Validate$ifTrue,
			function (subject) {
				return _elm_lang$core$List$isEmpty(
					subjectToList(subject));
			},
			error);
	});
var _rtfeldman$elm_validate$Validate$ifEmptyDict = F2(
	function (subjectToDict, error) {
		return A2(
			_rtfeldman$elm_validate$Validate$ifTrue,
			function (subject) {
				return _elm_lang$core$Dict$isEmpty(
					subjectToDict(subject));
			},
			error);
	});
var _rtfeldman$elm_validate$Validate$ifEmptySet = F2(
	function (subjectToSet, error) {
		return A2(
			_rtfeldman$elm_validate$Validate$ifTrue,
			function (subject) {
				return _elm_lang$core$Set$isEmpty(
					subjectToSet(subject));
			},
			error);
	});
var _rtfeldman$elm_validate$Validate$ifNothing = F2(
	function (subjectToMaybe, error) {
		return A2(
			_rtfeldman$elm_validate$Validate$ifTrue,
			function (subject) {
				return _elm_lang$core$Native_Utils.eq(
					subjectToMaybe(subject),
					_elm_lang$core$Maybe$Nothing);
			},
			error);
	});
var _rtfeldman$elm_validate$Validate$ifFalse = F2(
	function (test, error) {
		var getErrors = function (subject) {
			return test(subject) ? {ctor: '[]'} : {
				ctor: '::',
				_0: error,
				_1: {ctor: '[]'}
			};
		};
		return _rtfeldman$elm_validate$Validate$Validator(getErrors);
	});
var _rtfeldman$elm_validate$Validate$ifNotInt = F2(
	function (subjectToString, error) {
		return A2(
			_rtfeldman$elm_validate$Validate$ifFalse,
			function (subject) {
				return _rtfeldman$elm_validate$Validate$isInt(
					subjectToString(subject));
			},
			error);
	});
var _rtfeldman$elm_validate$Validate$ifInvalidEmail = F2(
	function (subjectToEmail, error) {
		return A2(
			_rtfeldman$elm_validate$Validate$ifFalse,
			function (subject) {
				return _rtfeldman$elm_validate$Validate$isValidEmail(
					subjectToEmail(subject));
			},
			error);
	});
var _rtfeldman$elm_validate$Validate$all = function (validators) {
	var newGetErrors = function (subject) {
		var accumulateErrors = F2(
			function (_p7, totalErrors) {
				var _p8 = _p7;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					totalErrors,
					_p8._0(subject));
			});
		return A3(
			_elm_lang$core$List$foldl,
			accumulateErrors,
			{ctor: '[]'},
			validators);
	};
	return _rtfeldman$elm_validate$Validate$Validator(newGetErrors);
};
var _rtfeldman$elm_validate$Validate$firstError = function (validators) {
	var getErrors = function (subject) {
		return A2(_rtfeldman$elm_validate$Validate$firstErrorHelp, validators, subject);
	};
	return _rtfeldman$elm_validate$Validate$Validator(getErrors);
};
